package java8features;

import java.util.Base64;


public class ParseXML {

	
	@SuppressWarnings("resource")
	public static void main(String[] args) {
		 String dec="";
		 byte[] decoded = Base64.getDecoder().decode(ParseXML.stringToByteArray(dec));
		 System.out.println(ParseXML.byteArrayToString(decoded));
	}

	
	public static byte[] stringToByteArray(String string) {
		byte[] bytes = new byte[string.length()];
		char[] chars = string.toCharArray();

		for (int i = 0; i != chars.length; i++) {
			bytes[i] = (byte) chars[i];
		}
		
		return bytes;
	}
	
	public static String byteArrayToString(byte[] bytes) {
		return byteArrayToString(bytes, bytes.length);
	}
	
	public static String byteArrayToString(byte[] bytes, int length) {
		char[] chars = new char[length];

		for (int i = 0; i != chars.length; i++) {
			chars[i] = (char) (bytes[i] & 0xff);
		}

		return new String(chars);
	}
}